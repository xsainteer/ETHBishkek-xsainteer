// app/page.tsx
'use client'

import React from 'react';
import { useAccount, useConnect, useDisconnect, useWriteContract, useWaitForTransactionReceipt } from 'wagmi'
import { PATENT_NFT_ADDRESS, PATENT_NFT_ABI, LICENSING_ADDRESS, LICENSING_ABI } from '../config/wagmi';
import { parseEther } from 'viem'; 

// --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –°—Ç–∞—Ç—É—Å–∞ ---
function WalletStatus() {
  const { isConnected, address } = useAccount()
  const { connectors, connect } = useConnect()
  const { disconnect } = useDisconnect()

  return (
    <div className="border p-4 rounded-lg bg-gray-100 mb-6">
      <h3 className="text-lg font-bold mb-2">1. –°—Ç–∞—Ç—É—Å –ö–æ—à–µ–ª—å–∫–∞</h3>
      {isConnected ? (
        <>
          <p className="text-green-600">‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω: **{address?.substring(0, 6)}...{address?.slice(-4)}**</p>
          <button onClick={() => disconnect()} className="mt-2 bg-red-500 text-white p-2 rounded">
            –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è
          </button>
        </>
      ) : (
        connectors.map((connector) => (
          <button
            key={connector.uid}
            onClick={() => connect({ connector })}
            className="bg-blue-500 text-white p-2 rounded mr-2"
          >
            –ü–æ–¥–∫–ª—é—á–∏—Ç—å {connector.name}
          </button>
        ))
      )}
    </div>
  )
}

// --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –°–æ–∑–¥–∞–Ω–∏—è –ü–∞—Ç–µ–Ω—Ç–∞ (–ú–∏–Ω—Ç) ---
function MintPatent() {
  const [ideaName, setIdeaName] = React.useState('');
  const { data: hash, writeContract } = useWriteContract();
  
  const { isLoading: isMinting, isSuccess: isMintSuccess } = useWaitForTransactionReceipt({ 
    hash,
    query: { enabled: !!hash },
  });

  const handleMint = () => {
    if (!ideaName) return alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–¥–µ–∏!');
    writeContract({
      address: PATENT_NFT_ADDRESS,
      abi: PATENT_NFT_ABI,
      functionName: 'mintPatent',
      args: [ideaName],
    });
  };

  return (
    <div className="border p-4 rounded-lg mb-6">
      <h3 className="text-lg font-bold mb-2">2. –°–æ–∑–¥–∞—Ç—å –ü–∞—Ç–µ–Ω—Ç (Mint NFT)</h3>
      <input 
        type="text" 
        value={ideaName} 
        onChange={(e) => setIdeaName(e.target.value)} 
        placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–π –∏–¥–µ–∏" 
        className="border p-2 rounded w-full mb-3"
      />
      <button 
        onClick={handleMint} 
        disabled={isMinting || isMintSuccess}
        className="bg-green-600 text-white p-2 rounded disabled:bg-gray-400"
      >
        {isMinting ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : isMintSuccess ? '‚úÖ –°–æ–∑–¥–∞–Ω–æ!' : '–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å IP –Ω–∞ –ë–ª–æ–∫—á–µ–π–Ω–µ'}
      </button>
      {isMintSuccess && <p className="mt-2 text-sm text-green-700">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –•—ç—à: {hash}</p>}
      {hash && !isMintSuccess && <p className="mt-2 text-sm text-blue-700">–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...</p>}
    </div>
  );
}

// --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –õ–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—è (–ü–æ–∫—É–ø–∫–∞) ---
function BuyLicense() {
  const PATENT_ID = 1; // –î–ª—è MVP –ª–∏—Ü–µ–Ω–∑–∏—Ä—É–µ–º –ü–∞—Ç–µ–Ω—Ç #1
  const LICENCE_PRICE = '0.001'; // –î–µ–º–æ-—Ü–µ–Ω–∞ –≤ ETH

  const { data: hash, writeContract } = useWriteContract();
  const { isLoading: isBuying, isSuccess: isBuySuccess } = useWaitForTransactionReceipt({ 
    hash,
    query: { enabled: !!hash },
  });

  const handleBuy = () => {
    writeContract({
      address: LICENSING_ADDRESS,
      abi: LICENSING_ABI,
      functionName: 'buyLicense',
      args: [BigInt(PATENT_ID)],
      value: parseEther(LICENCE_PRICE), // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ETH –∫–∞–∫ –æ–ø–ª–∞—Ç—É
    });
  };

  return (
    <div className="border p-4 rounded-lg">
      <h3 className="text-lg font-bold mb-2">3. –ö—É–ø–∏—Ç—å –õ–∏—Ü–µ–Ω–∑–∏—é (–î–µ–º–æ)</h3>
      <p className="mb-3">–ü–∞—Ç–µ–Ω—Ç: **"–î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ó–∞–º–æ–∫ –†–µ—Å—É—Ä—Å–æ–≤"**</p>
      <p className="mb-3">–¶–µ–Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ (MVP): **{LICENCE_PRICE} ETH**</p>
      
      <button 
        onClick={handleBuy} 
        disabled={isBuying || isBuySuccess}
        className="bg-purple-600 text-white p-2 rounded disabled:bg-gray-400"
      >
        {isBuying ? '–ü–æ–∫—É–ø–∫–∞...' : isBuySuccess ? 'üéâ –õ–∏—Ü–µ–Ω–∑–∏—è –∫—É–ø–ª–µ–Ω–∞!' : '–ö—É–ø–∏—Ç—å –õ–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ 30 –¥–Ω–µ–π'}
      </button>
      {isBuySuccess && <p className="mt-2 text-sm text-green-700">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –•—ç—à: {hash}</p>}
    </div>
  );
}

// --- –ì–ª–∞–≤–Ω–∞—è –°—Ç—Ä–∞–Ω–∏—Ü–∞ ---
export default function HomePage() {
  const { isConnected } = useAccount();

  return (
    <main className="max-w-xl mx-auto p-8">
      <h1 className="text-3xl font-extrabold mb-8 text-center">ETHBishkek-xsainteer DApp (MVP)</h1>
      
      <WalletStatus />
      
      {isConnected && (
        <>
          <MintPatent />
          <BuyLicense />
        </>
      )}
    </main>
  );
}